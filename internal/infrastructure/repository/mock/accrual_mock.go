// Code generated by MockGen. DO NOT EDIT.
// Source: accrual.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/bjlag/go-loyalty/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAccrualRepo is a mock of AccrualRepo interface.
type MockAccrualRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualRepoMockRecorder
}

// MockAccrualRepoMockRecorder is the mock recorder for MockAccrualRepo.
type MockAccrualRepoMockRecorder struct {
	mock *MockAccrualRepo
}

// NewMockAccrualRepo creates a new mock instance.
func NewMockAccrualRepo(ctrl *gomock.Controller) *MockAccrualRepo {
	mock := &MockAccrualRepo{ctrl: ctrl}
	mock.recorder = &MockAccrualRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualRepo) EXPECT() *MockAccrualRepoMockRecorder {
	return m.recorder
}

// AccrualByOrderNumber mocks base method.
func (m *MockAccrualRepo) AccrualByOrderNumber(ctx context.Context, orderNumber string) (*model.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*model.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccrualByOrderNumber indicates an expected call of AccrualByOrderNumber.
func (mr *MockAccrualRepoMockRecorder) AccrualByOrderNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualByOrderNumber", reflect.TypeOf((*MockAccrualRepo)(nil).AccrualByOrderNumber), ctx, orderNumber)
}

// AccrualsByUser mocks base method.
func (m *MockAccrualRepo) AccrualsByUser(ctx context.Context, userGUID string) ([]model.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualsByUser", ctx, userGUID)
	ret0, _ := ret[0].([]model.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccrualsByUser indicates an expected call of AccrualsByUser.
func (mr *MockAccrualRepoMockRecorder) AccrualsByUser(ctx, userGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualsByUser", reflect.TypeOf((*MockAccrualRepo)(nil).AccrualsByUser), ctx, userGUID)
}

// AccrualsInWork mocks base method.
func (m *MockAccrualRepo) AccrualsInWork(ctx context.Context) ([]model.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualsInWork", ctx)
	ret0, _ := ret[0].([]model.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccrualsInWork indicates an expected call of AccrualsInWork.
func (mr *MockAccrualRepoMockRecorder) AccrualsInWork(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualsInWork", reflect.TypeOf((*MockAccrualRepo)(nil).AccrualsInWork), ctx)
}

// Add mocks base method.
func (m *MockAccrualRepo) Add(ctx context.Context, accrual model.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAccrualRepoMockRecorder) Add(ctx, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAccrualRepo)(nil).Add), ctx, accrual)
}

// Create mocks base method.
func (m *MockAccrualRepo) Create(ctx context.Context, accrual *model.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccrualRepoMockRecorder) Create(ctx, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccrualRepo)(nil).Create), ctx, accrual)
}

// UpdateStatus mocks base method.
func (m *MockAccrualRepo) UpdateStatus(ctx context.Context, orderNumber string, newStatus model.AccrualStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderNumber, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAccrualRepoMockRecorder) UpdateStatus(ctx, orderNumber, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAccrualRepo)(nil).UpdateStatus), ctx, orderNumber, newStatus)
}
